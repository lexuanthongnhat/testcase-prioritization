        -:    0:Source:printtokens2.c
        -:    0:Graph:printtokens2.gcno
        -:    0:Data:printtokens2.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/***********************************************/
        -:    2:/*  assgnment.5  Shu Z. A00042813 for CS453    */
        -:    3:/*  using the tokenizer and stream module      */
        -:    4:/*  print_tokens.c Code                        */
        -:    5:/***********************************************/
        -:    6:
        -:    7:/***********************************************/
        -:    8:/* NAME:	print_tokens                   */
        -:    9:/* INPUT:	a filename                     */
        -:   10:/* OUTPUT:      print out the token stream     */
        -:   11:/* DESCRIPTION: using the tokenizer interface  */
        -:   12:/*              to print out the token stream  */
        -:   13:/***********************************************/
        -:   14:#include <stdio.h>
        -:   15:#include <ctype.h>
        -:   16:#include <string.h>
        -:   17:#include "tokens.h"
        -:   18:#define TRUE 1
        -:   19:#define FALSE 0
        -:   20:
function main called 1 returned 0% blocks executed 80%
        1:   21:main(argc,argv)
        -:   22:int argc;
        -:   23:char *argv[3];
        -:   24:{  char *fname;
        -:   25:   token tok;
        -:   26:   token_stream tp;
        1:   27:     if(argc==1)                  /* if not given filename,take as '""' */
branch  0 taken 0 (fallthrough)
branch  1 taken 1
        -:   28:       {
    #####:   29:        fname= (char *) malloc(sizeof(char));
    #####:   30:        *fname = '\0'; 
        -:   31:       }
        1:   32:     else if(argc==2)
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:   33:        fname= argv[1];
        -:   34:     else
    #####:   35:       { fprintf(stdout, "Error!,please give the token stream\n");
call    0 never executed
    #####:   36:         exit(0);
call    0 never executed
        -:   37:       }
        1:   38:    tp=open_token_stream(fname);  /* open token stream */
call    0 returned 1
        1:   39:    tok=get_token(tp);
call    0 returned 1
       14:   40:    while (is_eof_token(tok) ==FALSE) /* take one token each time until eof */
call    0 returned 13
branch  1 taken 12
branch  2 taken 1 (fallthrough)
        -:   41:    {
       12:   42:       print_token(tok);
call    0 returned 12
       12:   43:       tok=get_token(tp);
call    0 returned 12
        -:   44:    }
        1:   45:    print_token(tok); /* print eof signal */
call    0 returned 1
        1:   46:    exit(0);
        -:   47:}
        -:   48:
        -:   49:/* stream.c code */
        -:   50:
        -:   51:/***********************************************/
        -:   52:/* NMAE:	open_character_stream          */
        -:   53:/* INPUT:       a filename                     */
        -:   54:/* OUTPUT:      a pointer to chacracter_stream */
        -:   55:/* DESCRIPTION: when not given a filename,     */
        -:   56:/*              open stdin,otherwise open      */
        -:   57:/*              the existed file               */
        -:   58:/***********************************************/
function open_character_stream called 1 returned 100% blocks executed 63%
        1:   59:character_stream open_character_stream(fname)
        -:   60:char *fname;
        -:   61:{ character_stream fp;
        1:   62:  if(fname == NULL)
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####:   63:     fp=stdin;
        1:   64:  else if ((fp=fopen(fname,"r"))== NULL)
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
        -:   65:  {
    #####:   66:       fprintf(stdout, "The file %s doesn't exists\n",fname);
call    0 never executed
    #####:   67:       exit(0);
call    0 never executed
        -:   68:  }
        1:   69:  return(fp);
        -:   70:}
        -:   71:
        -:   72:/**********************************************/
        -:   73:/* NAME:	get_char                      */
        -:   74:/* INPUT:       a pointer to char_stream      */
        -:   75:/* OUTPUT:      a character                   */
        -:   76:/**********************************************/
function get_char called 67 returned 100% blocks executed 100%
       67:   77:char get_char(fp)
        -:   78:character_stream fp;
        -:   79:{ char ch;
       67:   80:  ch=getc(fp);
call    0 returned 67
       67:   81:  return(ch);
        -:   82:}
        -:   83:
        -:   84:/***************************************************/
        -:   85:/* NAME:      unget_char                           */
        -:   86:/* INPUT:     a pointer to char_stream,a character */
        -:   87:/* OUTPUT:    a character                          */
        -:   88:/* DESCRIPTION:when unable to put back,return EOF  */
        -:   89:/***************************************************/
function unget_char called 5 returned 100% blocks executed 80%
        5:   90:char unget_char(ch,fp)
        -:   91:character_stream fp;
        -:   92:char ch;
        -:   93:{ char c;
        5:   94:  c=ungetc(ch,fp);
call    0 returned 5
        5:   95:  if(c ==EOF)
branch  0 taken 0 (fallthrough)
branch  1 taken 5
        -:   96:    {
    #####:   97:     return(c);
        -:   98:    }
        -:   99:  else
        5:  100:     return(c);
        -:  101:}
        -:  102:
        -:  103:/* tokenizer.c code */
        -:  104:
        -:  105:
        -:  106:char buffer[81];  /* fixed array length MONI */ /* to store the token temporar */
        -:  107:
        -:  108:
        -:  109:static int is_spec_symbol();
        -:  110:static int is_token_end();
        -:  111:static unget_error();
        -:  112:static int is_keyword();
        -:  113:static int is_identifier();
        -:  114:static int is_num_constant();
        -:  115:static int is_char_constant();
        -:  116:static int is_str_constant();
        -:  117:static int is_comment();
        -:  118:static void print_spec_symbol();
        -:  119:
        -:  120:/********************************************************/
        -:  121:/* NAME:	open_token_stream                       */
        -:  122:/* INPUT:       a filename                              */
        -:  123:/* OUTPUT:      a pointer to a token_stream             */
        -:  124:/* DESCRIPTION: when filename is EMPTY,choice standard  */
        -:  125:/*              input device as input source            */
        -:  126:/********************************************************/
function open_token_stream called 1 returned 100% blocks executed 80%
        1:  127:token_stream open_token_stream(fname)
        -:  128:char *fname;
        -:  129:{
        -:  130: token_stream fp;
        1:  131: if(strcmp(fname,"")==0)
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####:  132:    fp=open_character_stream(NULL);
call    0 never executed
        -:  133: else
        1:  134:    fp=open_character_stream(fname);
call    0 returned 1
        1:  135: return(fp);
        -:  136:}
        -:  137:
        -:  138:/********************************************************/
        -:  139:/* NAME :	get_token                               */
        -:  140:/* INPUT: 	a pointer to the tokens_stream          */
        -:  141:/* OUTPUT:      a token                                 */
        -:  142:/* DESCRIPTION: according the syntax of tokens,dealing  */
        -:  143:/*              with different case  and get one token  */
        -:  144:/********************************************************/
function get_token called 13 returned 100% blocks executed 80%
       13:  145:token get_token(tp)
        -:  146:token_stream tp;
        -:  147:{ 
       13:  148:  int i=0,j;
       13:  149:  int id=0;
        -:  150:  char ch,ch1[2];
     1066:  151:  for (j=0;j<=80;j++)          /* initial the buffer   */
branch  0 taken 1053
branch  1 taken 13 (fallthrough)
     1053:  152:      { buffer[j]='\0';} 
       13:  153:   ch1[0]='\0';
       13:  154:   ch1[1]='\0';
       13:  155:   ch=get_char(tp);
call    0 returned 13
       26:  156:   while(ch==' '||ch=='\n')      /* strip all blanks until meet characters */
branch  0 taken 0
branch  1 taken 13 (fallthrough)
branch  2 taken 0
branch  3 taken 13 (fallthrough)
        -:  157:      {
    #####:  158:       ch=get_char(tp);
call    0 never executed
        -:  159:      } 
       13:  160:   buffer[i]=ch;
       13:  161:   if(is_eof_token(buffer)==TRUE)return(buffer);
call    0 returned 13
branch  1 taken 1 (fallthrough)
branch  2 taken 12
       12:  162:   if(is_spec_symbol(buffer)==TRUE)return(buffer); 
call    0 returned 12
branch  1 taken 4 (fallthrough)
branch  2 taken 8
        8:  163:   if(ch =='"')id=1;    /* prepare for string */
branch  0 taken 0 (fallthrough)
branch  1 taken 8
        8:  164:   if(ch ==59)id=2;    /* prepare for comment */
branch  0 taken 1 (fallthrough)
branch  1 taken 7
        8:  165:   ch=get_char(tp);
call    0 returned 8
        -:  166:
       62:  167:   while (is_token_end(id,ch) == FALSE)/* until meet the end character */
call    0 returned 54
branch  1 taken 46
branch  2 taken 8 (fallthrough)
        -:  168:   {
       46:  169:       i++;
       46:  170:       buffer[i]=ch;
       46:  171:       ch=get_char(tp);
call    0 returned 46
        -:  172:   }
        8:  173:   ch1[0]=ch;                        /* hold the end charcater          */
        8:  174:   if(is_eof_token(ch1)==TRUE)       /* if end character is eof token    */
call    0 returned 8
branch  1 taken 0 (fallthrough)
branch  2 taken 8
    #####:  175:      { ch=unget_char(ch,tp);        /* then put back eof on token_stream */
call    0 never executed
    #####:  176:        if(ch==EOF)unget_error(tp);
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####:  177:        return(buffer);
        -:  178:      }
        8:  179:   if(is_spec_symbol(ch1)==TRUE)     /* if end character is special_symbol */
call    0 returned 8
branch  1 taken 4 (fallthrough)
branch  2 taken 4
        4:  180:      { ch=unget_char(ch,tp);        /* then put back this character       */
call    0 returned 4
        4:  181:        if(ch==EOF)unget_error(tp);
branch  0 taken 0 (fallthrough)
branch  1 taken 4
call    2 never executed
        4:  182:        return(buffer);
        -:  183:      }
        4:  184:   if(id==1)                  /* if end character is " and is string */
branch  0 taken 0 (fallthrough)
branch  1 taken 4
    #####:  185:     { i++;                     /* case,hold the second " in buffer    */
    #####:  186:       buffer[i]=ch;
    #####:  187:       return(buffer); 
        -:  188:     }
        4:  189:   if(id==0 && ch==59)
branch  0 taken 3 (fallthrough)
branch  1 taken 1
branch  2 taken 1 (fallthrough)
branch  3 taken 2
        -:  190:                                   /* when not in string or comment,meet ";" */
        1:  191:     { ch=unget_char(ch,tp);       /* then put back this character         */
call    0 returned 1
        1:  192:       if(ch==EOF) unget_error(tp);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
call    2 never executed
        -:  193:       
        1:  194:       return(buffer); 
        -:  195:     }
        3:  196:  return(buffer);                   /* return nomal case token             */
        -:  197:}
        -:  198:
        -:  199:/*******************************************************/
        -:  200:/* NAME:	is_token_end                           */
        -:  201:/* INPUT:       a character,a token status             */
        -:  202:/* OUTPUT:	a BOOLEAN value                        */
        -:  203:/*******************************************************/
function is_token_end called 54 returned 100% blocks executed 81%
       54:  204:static int is_token_end(str_com_id,ch)
        -:  205:char ch;
        -:  206:int str_com_id;
        -:  207:{ char ch1[2];  /* fixed array declaration MONI */
       54:  208: ch1[0]=ch;
       54:  209: ch1[1]='\0';
       54:  210: if(is_eof_token(ch1)==TRUE)return(TRUE); /* is eof token? */
call    0 returned 54
branch  1 taken 0 (fallthrough)
branch  2 taken 54
       54:  211: if(str_com_id==1)          /* is string token */
branch  0 taken 0 (fallthrough)
branch  1 taken 54
    #####:  212:    { if(ch=='"' | ch=='\n')   /* for string until meet another " */
branch  0 never executed
branch  1 never executed
    #####:  213:         return(TRUE);
        -:  214:      else
    #####:  215:         return(FALSE);
        -:  216:    }
        -:  217:
       54:  218: if(str_com_id==2)    /* is comment token */
branch  0 taken 19 (fallthrough)
branch  1 taken 35
       19:  219:   { if(ch=='\n')     /* for comment until meet end of line */
branch  0 taken 1 (fallthrough)
branch  1 taken 18
        1:  220:        return(TRUE);
        -:  221:      else
       18:  222:        return(FALSE);
        -:  223:   }
        -:  224:
       35:  225: if(is_spec_symbol(ch1)==TRUE) return(TRUE); /* is special_symbol? */
call    0 returned 35
branch  1 taken 4 (fallthrough)
branch  2 taken 31
       31:  226: if(ch ==' ' || ch=='\n' || ch==59) return(TRUE); 
branch  0 taken 29 (fallthrough)
branch  1 taken 2
branch  2 taken 29 (fallthrough)
branch  3 taken 0
branch  4 taken 1 (fallthrough)
branch  5 taken 28
        -:  227:                              /* others until meet blank or tab or 59 */
       28:  228: return(FALSE);               /* other case,return FALSE */
        -:  229:}
        -:  230:
        -:  231:/****************************************************/
        -:  232:/* NAME :	token_type                          */
        -:  233:/* INPUT:       a pointer to the token              */
        -:  234:/* OUTPUT:      an integer value                    */
        -:  235:/* DESCRIPTION: the integer value is corresponding  */
        -:  236:/*              to the different token type         */
        -:  237:/****************************************************/
function token_type called 13 returned 100% blocks executed 88%
       13:  238:static int token_type(tok)
        -:  239:token tok;
        -:  240:{ 
       13:  241: if(is_keyword(tok))return(keyword);
call    0 returned 13
branch  1 taken 0 (fallthrough)
branch  2 taken 13
       13:  242: if(is_spec_symbol(tok))return(spec_symbol);
call    0 returned 13
branch  1 taken 4 (fallthrough)
branch  2 taken 9
        9:  243: if(is_identifier(tok))return(identifier);
call    0 returned 9
branch  1 taken 3 (fallthrough)
branch  2 taken 6
        6:  244: if(is_num_constant(tok))return(num_constant);
call    0 returned 6
branch  1 taken 0 (fallthrough)
branch  2 taken 6
        6:  245: if(is_str_constant(tok))return(str_constant);
call    0 returned 6
branch  1 taken 0 (fallthrough)
branch  2 taken 6
        6:  246: if(is_char_constant(tok))return(char_constant);
call    0 returned 6
branch  1 taken 1 (fallthrough)
branch  2 taken 5
        5:  247: if(is_comment(tok))return(comment);
call    0 returned 5
branch  1 taken 1 (fallthrough)
branch  2 taken 4
        4:  248: if(is_eof_token(tok))return(end);
call    0 returned 4
branch  1 taken 1 (fallthrough)
branch  2 taken 3
        3:  249: return(error);                    /* else look as error token */
        -:  250:}
        -:  251:
        -:  252:/****************************************************/
        -:  253:/* NAME:	print_token                         */
        -:  254:/* INPUT:	a pointer to the token              */
        -:  255:/* OUTPUT:      a BOOLEAN value,print out the token */
        -:  256:/*              according the forms required        */
        -:  257:/****************************************************/
function print_token called 13 returned 100% blocks executed 83%
       13:  258:int print_token(tok)
        -:  259:token tok;
        -:  260:{ int type;
       13:  261:  type=token_type(tok);
call    0 returned 13
       13:  262: if(type==error)
branch  0 taken 3 (fallthrough)
branch  1 taken 10
        3:  263:   { fprintf(stdout, "error,\"%s\".\n",tok);
call    0 returned 3
        -:  264:   } 
       13:  265: if(type==keyword)
branch  0 taken 0 (fallthrough)
branch  1 taken 13
    #####:  266:   {fprintf(stdout, "keyword,\"%s\".\n",tok);
call    0 never executed
        -:  267:   }
       13:  268: if(type==spec_symbol)print_spec_symbol(tok);
branch  0 taken 4 (fallthrough)
branch  1 taken 9
call    2 returned 4
       13:  269: if(type==identifier)
branch  0 taken 3 (fallthrough)
branch  1 taken 10
        3:  270:   {fprintf(stdout, "identifier,\"%s\".\n",tok);
call    0 returned 3
        -:  271:   }
       13:  272: if(type==num_constant)
branch  0 taken 0 (fallthrough)
branch  1 taken 13
    #####:  273:   {fprintf(stdout, "numeric,%s.\n",tok);
call    0 never executed
        -:  274:   }
       13:  275: if(type==str_constant)
branch  0 taken 0 (fallthrough)
branch  1 taken 13
    #####:  276:   {fprintf(stdout, "string,%s.\n",tok);
call    0 never executed
        -:  277:   }
       13:  278: if(type==char_constant)
branch  0 taken 1 (fallthrough)
branch  1 taken 12
        1:  279:   {tok=tok+1;
        1:  280:    fprintf(stdout, "character,\"%s\".\n",tok);
call    0 returned 1
        -:  281:   }
       13:  282: if(type==end) 
branch  0 taken 1 (fallthrough)
branch  1 taken 12
        1:  283:   fprintf(stdout, "eof.\n");
call    0 returned 1
       13:  284:   }
        -:  285:
        -:  286:/* the code for tokens judgment function */
        -:  287:
        -:  288:/*************************************/
        -:  289:/* NAME:	is_eof_token         */
        -:  290:/* INPUT: 	a pointer to a token */
        -:  291:/* OUTPUT:      a BOOLEAN value      */
        -:  292:/*************************************/
function is_eof_token called 92 returned 100% blocks executed 100%
       92:  293:int is_eof_token(tok)
        -:  294:token tok;
        -:  295:{ 
       92:  296:  if( *tok==EOF)
branch  0 taken 3 (fallthrough)
branch  1 taken 89
        3:  297:      return(TRUE);
        -:  298:  else
       89:  299:      return(FALSE);
        -:  300:}
        -:  301:
        -:  302:/*************************************/
        -:  303:/* NAME:	is_comment           */
        -:  304:/* INPUT: 	a pointer to a token */
        -:  305:/* OUTPUT:      a BOOLEAN value      */
        -:  306:/*************************************/
function is_comment called 5 returned 100% blocks executed 100%
        5:  307:static int is_comment(ident)
        -:  308:token ident;
        -:  309:{
        5:  310:  if( (*ident) ==59 )   /* the char is 59   */
branch  0 taken 1 (fallthrough)
branch  1 taken 4
        1:  311:     return(TRUE);
        -:  312:  else
        4:  313:     return(FALSE);
        -:  314:}
        -:  315:
        -:  316:/*************************************/
        -:  317:/* NAME:	is_keyword           */
        -:  318:/* INPUT: 	a pointer to a token */
        -:  319:/* OUTPUT:      a BOOLEAN value      */
        -:  320:/*************************************/
function is_keyword called 13 returned 100% blocks executed 89%
       13:  321:static int is_keyword(str)
        -:  322:    token  str;
        -:  323:{ 
       26:  324: if (!strcmp(str,"and") || !strcmp(str,"or") || !strcmp(str,"if") ||
branch  0 taken 13 (fallthrough)
branch  1 taken 0
branch  2 taken 13 (fallthrough)
branch  3 taken 0
branch  4 taken 13 (fallthrough)
branch  5 taken 0
branch  6 taken 13 (fallthrough)
branch  7 taken 0
       26:  325:    !strcmp(str,"xor")||!strcmp(str,"lambda")||!strcmp(str,"=>"))
branch  0 taken 13 (fallthrough)
branch  1 taken 0
branch  2 taken 0 (fallthrough)
branch  3 taken 13
    #####:  326:      return(TRUE);
        -:  327:  else 
       13:  328:      return(FALSE);
        -:  329:}
        -:  330:
        -:  331:/*************************************/
        -:  332:/* NAME:	is_char_constant     */
        -:  333:/* INPUT: 	a pointer to a token */
        -:  334:/* OUTPUT:      a BOOLEAN value      */
        -:  335:/*************************************/
function is_char_constant called 6 returned 100% blocks executed 100%
        6:  336:static int is_char_constant(str)
        -:  337:    token str;
        -:  338:{
        6:  339:  if ((*str)=='#' && isalpha(*(str+1)))
branch  0 taken 1 (fallthrough)
branch  1 taken 5
call    2 returned 1
branch  3 taken 1 (fallthrough)
branch  4 taken 0
        1:  340:     return(TRUE);
        -:  341:  else  
        5:  342:     return(FALSE);
        -:  343:}
        -:  344:
        -:  345:/*************************************/
        -:  346:/* NAME:	is_num_constant      */
        -:  347:/* INPUT: 	a pointer to a token */
        -:  348:/* OUTPUT:      a BOOLEAN value      */
        -:  349:/*************************************/
function is_num_constant called 6 returned 100% blocks executed 82%
        6:  350:static int is_num_constant(str)
        -:  351:    token  str;
        -:  352:{
        6:  353:  int i=1;
        -:  354:  
        6:  355:  if ( isdigit(*str)) 
call    0 returned 6
branch  1 taken 1 (fallthrough)
branch  2 taken 5
        -:  356:    {
        2:  357:    while ( *(str+i) != '\0' )   /* until meet token end sign */
branch  0 taken 1
branch  1 taken 0 (fallthrough)
        -:  358:      {
        1:  359:       if(isdigit(*(str+i)))
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    #####:  360:         i++;
        -:  361:       else
        1:  362:         return(FALSE);
        -:  363:      }                         /* end WHILE */
    #####:  364:    return(TRUE);
        -:  365:    }
        -:  366:  else
        5:  367:   return(FALSE);               /* other return FALSE */
        -:  368:}
        -:  369:
        -:  370:/*************************************/
        -:  371:/* NAME:	is_str_constant      */
        -:  372:/* INPUT: 	a pointer to a token */
        -:  373:/* OUTPUT:      a BOOLEAN value      */
        -:  374:/*************************************/
function is_str_constant called 6 returned 100% blocks executed 33%
        6:  375:static int is_str_constant(str)
        -:  376:    token str;
        -:  377:{
        6:  378:  int i=1;
        -:  379: 
        6:  380:  if ( *str =='"')
branch  0 taken 0 (fallthrough)
branch  1 taken 6
    #####:  381:     { while (*(str+i)!='\0')  /* until meet the token end sign */
branch  0 never executed
branch  1 never executed
    #####:  382:         { if(*(str+i)=='"')
branch  0 never executed
branch  1 never executed
    #####:  383:             return(TRUE);        /* meet the second '"'           */
        -:  384:           else
    #####:  385:           i++;
        -:  386:         }               /* end WHILE */
    #####:  387:     return(FALSE);
        -:  388:    }
        -:  389:  else
        6:  390:    return(FALSE);       /* other return FALSE */
        -:  391:}
        -:  392:/*************************************/
        -:  393:/* NAME:	is_identifier         */
        -:  394:/* INPUT: 	a pointer to a token */
        -:  395:/* OUTPUT:      a BOOLEAN value      */
        -:  396:/*************************************/
function is_identifier called 9 returned 100% blocks executed 100%
        9:  397:static int is_identifier(str)
        -:  398:    token  str;
        -:  399:{
        9:  400:  int i=1;
        -:  401:
        9:  402:  if ( isalpha( *str) ) 
call    0 returned 9
branch  1 taken 4 (fallthrough)
branch  2 taken 5
        -:  403:     {
       14:  404:        while(  *(str+i) !='\0' )   /* unti meet the end token sign */
branch  0 taken 7
branch  1 taken 3 (fallthrough)
        -:  405:           { 
        7:  406:            if(isalpha(*(str+i)) || isdigit(*(str+i)))   
call    0 returned 7
branch  1 taken 3 (fallthrough)
branch  2 taken 4
call    3 returned 3
branch  4 taken 2 (fallthrough)
branch  5 taken 1
        6:  407:               i++;
        -:  408:            else
        1:  409:               return(FALSE);
        -:  410:           }      /* end WHILE */
        3:  411:     return(TRUE);
        -:  412:     }
        -:  413:  else
        5:  414:     return(FALSE);
        -:  415:}
        -:  416:
        -:  417:/******************************************/
        -:  418:/* NAME:	unget_error               */
        -:  419:/* INPUT:       a pointer to token stream */
        -:  420:/* OUTPUT: 	print error message       */
        -:  421:/******************************************/
function unget_error called 0 returned 0% blocks executed 0%
    #####:  422:static unget_error(fp)
        -:  423:character_stream *fp;
        -:  424:{
    #####:  425:fprintf(stdout,"It can not get charcter\n");
call    0 never executed
    #####:  426:}
        -:  427:
        -:  428:/*************************************************/
        -:  429:/* NAME:        print_spec_symbol                */
        -:  430:/* INPUT:       a pointer to a spec_symbol token */
        -:  431:/* OUTPUT :     print out the spec_symbol token  */
        -:  432:/*              according to the form required   */
        -:  433:/*************************************************/
function print_spec_symbol called 4 returned 100% blocks executed 65%
        4:  434:static void print_spec_symbol(str)
        -:  435:token str;
        -:  436:{
        4:  437:    if      (!strcmp(str,"("))
branch  0 taken 0 (fallthrough)
branch  1 taken 4
        -:  438:    {
    #####:  439:             fprintf(stdout, "%s\n","lparen.");
call    0 never executed
    #####:  440:             return;
        -:  441:    } 
        4:  442:    if (!strcmp(str,")"))
branch  0 taken 0 (fallthrough)
branch  1 taken 4
        -:  443:    {
    #####:  444:             fprintf(stdout, "%s\n","rparen.");
call    0 never executed
    #####:  445:             return;
        -:  446:    }
        4:  447:    if (!strcmp(str,"["))
branch  0 taken 0 (fallthrough)
branch  1 taken 4
        -:  448:    {
    #####:  449:             fprintf(stdout, "%s\n","lsquare.");
call    0 never executed
    #####:  450:             return;
        -:  451:    }
        4:  452:    if (!strcmp(str,"]"))
branch  0 taken 2 (fallthrough)
branch  1 taken 2
        -:  453:    {
        2:  454:             fprintf(stdout, "%s\n","rsquare.");
call    0 returned 2
        2:  455:             return;
        -:  456:    }
        2:  457:    if (!strcmp(str,"'"))
branch  0 taken 1 (fallthrough)
branch  1 taken 1
        -:  458:    {
        1:  459:             fprintf(stdout, "%s\n","quote.");
call    0 returned 1
        1:  460:             return;
        -:  461:    }
        1:  462:    if (!strcmp(str,"`"))
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        -:  463:    {
        1:  464:             fprintf(stdout, "%s\n","bquote.");
call    0 returned 1
        1:  465:             return;
        -:  466:    }
        -:  467:    
    #####:  468:             fprintf(stdout, "%s\n","comma.");
call    0 never executed
        -:  469:}
        -:  470:
        -:  471:
        -:  472:/*************************************/
        -:  473:/* NAME:        is_spec_symbol       */
        -:  474:/* INPUT:       a pointer to a token */
        -:  475:/* OUTPUT:      a BOOLEAN value      */
        -:  476:/*************************************/
function is_spec_symbol called 68 returned 100% blocks executed 75%
       68:  477:static int is_spec_symbol(str)
        -:  478:    token str;
        -:  479:{
       68:  480:    if (!strcmp(str,"("))
branch  0 taken 0 (fallthrough)
branch  1 taken 68
        -:  481:    {  
    #####:  482:        return(TRUE);
        -:  483:    }
       68:  484:    if (!strcmp(str,")"))
branch  0 taken 0 (fallthrough)
branch  1 taken 68
        -:  485:    {
    #####:  486:        return(TRUE);
        -:  487:    }
       68:  488:    if (!strcmp(str,"["))
branch  0 taken 0 (fallthrough)
branch  1 taken 68
        -:  489:    {
    #####:  490:        return(TRUE);
        -:  491:    }
       68:  492:    if (!strcmp(str,"]"))
branch  0 taken 8 (fallthrough)
branch  1 taken 60
        -:  493:    {
        8:  494:        return(TRUE);
        -:  495:    }
       60:  496:    if (!strcmp(str,"'"))
branch  0 taken 4 (fallthrough)
branch  1 taken 56
        -:  497:    {
        4:  498:        return(TRUE);
        -:  499:    }
       56:  500:    if (!strcmp(str,"`"))
branch  0 taken 4 (fallthrough)
branch  1 taken 52
        -:  501:    {
        4:  502:        return(TRUE);
        -:  503:    }
       52:  504:    if (!strcmp(str,","))
branch  0 taken 0 (fallthrough)
branch  1 taken 52
        -:  505:    {
    #####:  506:        return(TRUE);
        -:  507:    }
       52:  508:    return(FALSE);     /* others return FALSE */
        -:  509:}
        -:  510:
        -:  511:

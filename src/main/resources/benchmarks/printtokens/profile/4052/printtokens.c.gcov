        -:    0:Source:printtokens.c
        -:    0:Graph:printtokens.gcno
        -:    0:Data:printtokens.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:
        -:    2:
        -:    3:# include <ctype.h>
        -:    4:
        -:    5:# define START  5
        -:    6:# define TRUE  1
        -:    7:# define FALSE 0
        -:    8:
        -:    9:typedef int BOOLEAN;
        -:   10:typedef char *string;
        -:   11:
        -:   12:# include <stdio.h>
        -:   13:# include "tokens.h"
        -:   14:
        -:   15:static token numeric_case();
        -:   16:static token error_or_eof_case();
        -:   17:static int check_delimiter();
        -:   18:static int keyword(int state);
        -:   19:static int special(int state);
        -:   20:static skip(character_stream stream_ptr);
        -:   21:static int constant(int state,char token_str[],int token_ind);
        -:   22:static int next_state();
        -:   23:static get_actual_token(char token_str[],int token_ind);
        -:   24:
function main called 1 returned 0% blocks executed 82%
        1:   25:main(argc,argv)
        -:   26:int argc;
        -:   27:char *argv[];
        -:   28:{
        -:   29:      token token_ptr;
        -:   30:      token_stream stream_ptr;
        -:   31:
        1:   32:      if(argc>2)
branch  0 taken 0 (fallthrough)
branch  1 taken 1
        -:   33:      {
    #####:   34:          fprintf(stdout, "The format is print_tokens filename(optional)\n");
call    0 never executed
    #####:   35:          exit(1);
call    0 never executed
        -:   36:      }
        1:   37:      stream_ptr=open_token_stream(argv[1]);
call    0 returned 1
        -:   38:
        6:   39:      while(!is_eof_token((token_ptr=get_token(stream_ptr))))
call    0 returned 5
call    1 returned 5
branch  2 taken 4
branch  3 taken 1 (fallthrough)
        4:   40:                print_token(token_ptr);
call    0 returned 4
        1:   41:      print_token(token_ptr);
call    0 returned 1
        1:   42:  exit(0);
        -:   43:}
        -:   44:
        -:   45:
        -:   46:
        -:   47:/* *********************************************************************
        -:   48:       Function name : open_character_stream
        -:   49:       Input         : filename
        -:   50:       Output        : charactre stream.
        -:   51:       Exceptions    : If file name doesn't exists it will
        -:   52:                       exit from the program.
        -:   53:       Description   : The function first allocates the memory for
        -:   54:                       the structure and initilizes it. The constant
        -:   55:                       START gives the first character available in
        -:   56:                       the stream. It ckecks whether the filename is
        -:   57:                       empty string. If it is it assigns file pointer
        -:   58:                       to stdin else it opens the respective file as input.                   * ******************************************************************* */
        -:   59:
function open_character_stream called 1 returned 100% blocks executed 63%
        1:   60:character_stream open_character_stream(FILENAME)
        -:   61:string FILENAME;
        -:   62:{
        -:   63:      character_stream stream_ptr;
        -:   64:
        1:   65:      stream_ptr=(character_stream)malloc(sizeof(struct stream_type));
        1:   66:      stream_ptr->stream_ind=START;
        1:   67:      stream_ptr->stream[START]='\0';
        1:   68:      if(FILENAME == NULL)
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####:   69:          stream_ptr->fp=stdin;
        1:   70:      else if((stream_ptr->fp=fopen(FILENAME,"r"))==NULL)
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
        -:   71:           {
    #####:   72:               fprintf(stdout, "The file %s doesn't exists\n",FILENAME);
call    0 never executed
    #####:   73:               exit(0);
call    0 never executed
        -:   74:           }
        1:   75:      return(stream_ptr);
        -:   76:}
        -:   77:
        -:   78:/* *********************************************************************
        -:   79:   Function name : get_char
        -:   80:   Input         : charcter_stream.
        -:   81:   Output        : character.
        -:   82:   Exceptions    : None.
        -:   83:   Description   : This function takes character_stream type variable
        -:   84:                   as input and returns one character. If the stream is
        -:   85:                   empty then it reads the next line from the file and
        -:   86:                   returns the character.
        -:   87: * ****************************************************************** */
        -:   88:
function get_char called 19 returned 100% blocks executed 100%
       19:   89:CHARACTER get_char(stream_ptr)
        -:   90:character_stream stream_ptr;
        -:   91:{
       19:   92:      if(stream_ptr->stream[stream_ptr->stream_ind] == '\0')
branch  0 taken 4 (fallthrough)
branch  1 taken 15
        -:   93:      {
        4:   94:              if(fgets(stream_ptr->stream+START,80-START,stream_ptr->fp) == NULL)/* Fix bug: add -START - hf*/
call    0 returned 4
branch  1 taken 1 (fallthrough)
branch  2 taken 3
        1:   95:                    stream_ptr->stream[START]=EOF;
        4:   96:              stream_ptr->stream_ind=START;
        -:   97:      }
       19:   98:      return(stream_ptr->stream[(stream_ptr->stream_ind)++]);
        -:   99:}
        -:  100:
        -:  101:/* *******************************************************************
        -:  102:   Function name : is_end_of_character_stream.
        -:  103:   Input         : character_stream.
        -:  104:   Output        : Boolean value.
        -:  105:   Description   : This function checks whether it is end of character
        -:  106:                   stream or not. It returns BOOLEANvariable which is
        -:  107:                   true or false. The function checks whether the last
        -:  108:                   read character is end file character or not and
        -:  109:                   returns the value according to it.
        -:  110: * ****************************************************************** */
        -:  111:
function is_end_of_character_stream called 1 returned 100% blocks executed 75%
        1:  112:BOOLEAN is_end_of_character_stream(stream_ptr)
        -:  113:character_stream stream_ptr;
        -:  114:{
        1:  115:      if(stream_ptr->stream[stream_ptr->stream_ind-1] == EOF)
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:  116:            return(TRUE);
        -:  117:      else
    #####:  118:            return(FALSE);
        -:  119:}
        -:  120:
        -:  121:/* *********************************************************************
        -:  122:   Function name : unget_char
        -:  123:   Input         : character,character_stream.
        -:  124:   Output        : void.
        -:  125:   Description   : This function adds the character ch to the stream.
        -:  126:                   This is accomplished by decrementing the stream_ind
        -:  127:                   and storing it in the stream. If it is not possible
        -:  128:                   to unget the character then it returns
        -:  129: * ******************************************************************* */
        -:  130:
function unget_char called 4 returned 100% blocks executed 75%
        4:  131:unget_char(ch,stream_ptr)
        -:  132:CHARACTER ch;
        -:  133:character_stream stream_ptr;
        -:  134:{
        4:  135:      if(stream_ptr->stream_ind == 0)
branch  0 taken 0 (fallthrough)
branch  1 taken 4
    #####:  136:          return;
        -:  137:      else
        4:  138:          stream_ptr->stream[--(stream_ptr->stream_ind)]=ch;
        4:  139:      return;
        -:  140:}
        -:  141:
        -:  142:
        -:  143:/* *******************************************************************
        -:  144:   Function name : open_token_stream
        -:  145:   Input         : filename
        -:  146:   Output        : token_stream
        -:  147:   Exceptions    : Exits if the file specified by filename not found.
        -:  148:   Description   : This function takes filename as input and opens the
        -:  149:                   token_stream which is nothing but the character stream.
        -:  150:                   This function allocates the memory for token_stream
        -:  151:                   and calls open_character_stream to open the file as
        -:  152:                   input. This function returns the token_stream.
        -:  153: * ****************************************************************** */
        -:  154:
function open_token_stream called 1 returned 100% blocks executed 100%
        1:  155:token_stream open_token_stream(FILENAME)
        -:  156:string FILENAME;
        -:  157:{
        -:  158:    token_stream token_ptr;
        -:  159:
        1:  160:    token_ptr=(token_stream)malloc(sizeof(struct token_stream_type));
        1:  161:    token_ptr->ch_stream=open_character_stream(FILENAME);/* Get character
call    0 returned 1
        -:  162:                                                             stream  */
        1:  163:    return(token_ptr);
        -:  164:}
        -:  165:
        -:  166:/* ********************************************************************
        -:  167:   Function name : get_token
        -:  168:   Input         : token_stream
        -:  169:   Output        : token
        -:  170:   Exceptions    : none.
        -:  171:   Description   : This function returns the next token from the
        -:  172:                   token_stream.The type of token is integer and specifies
        -:  173:                   only the type of the token. DFA is used for finding the
        -:  174:                   next token. cu_state is initialized to zero and charcter
        -:  175:                   are read until the the is the final state and it
        -:  176:                   returns the token type.
        -:  177:* ******************************************************************* */
        -:  178:
function get_token called 5 returned 100% blocks executed 69%
        5:  179:token get_token(tstream_ptr)
        -:  180:token_stream tstream_ptr;
        -:  181:{
        -:  182:      char token_str[80]; /* This buffer stores the current token */
        -:  183:      int token_ind;      /* Index to the token_str  */
        -:  184:      token token_ptr;
        -:  185:      CHARACTER ch;
        -:  186:      int cu_state,next_st,token_found;
        -:  187:
        5:  188:      token_ptr=(token)(malloc(sizeof(struct token_type)));
        5:  189:      ch=get_char(tstream_ptr->ch_stream);
call    0 returned 5
        5:  190:      cu_state=token_ind=token_found=0;
       23:  191:      while(!token_found)
branch  0 taken 18
branch  1 taken 0 (fallthrough)
        -:  192:      {
       18:  193:	  if(token_ind < 80) /* ADDED ERROR CHECK - hf */
branch  0 taken 18 (fallthrough)
branch  1 taken 0
        -:  194:	  {
       18:  195:	      token_str[token_ind++]=ch;
       18:  196:	      next_st=next_state(cu_state,ch);
call    0 returned 18
        -:  197:	  }
        -:  198:	  else
        -:  199:	  {
    #####:  200:	      next_st = -1; /* - hf */
        -:  201:	  }
       18:  202:	  if (next_st == -1) { /* ERROR or EOF case */
branch  0 taken 1 (fallthrough)
branch  1 taken 17
        6:  203:	      return(error_or_eof_case(tstream_ptr,
call    0 returned 1
        -:  204:				       token_ptr,cu_state,token_str,token_ind,ch));
       17:  205:	  } else if (next_st == -2) {/* This is numeric case. */
branch  0 taken 2 (fallthrough)
branch  1 taken 15
        2:  206:	      return(numeric_case(tstream_ptr,token_ptr,ch,
call    0 returned 2
        -:  207:				  token_str,token_ind));
       15:  208:	  } else if (next_st == -3) {/* This is the IDENTIFIER case */
branch  0 taken 1 (fallthrough)
branch  1 taken 14
        1:  209:	      token_ptr->token_id=IDENTIFIER;
        1:  210:	      unget_char(ch,tstream_ptr->ch_stream);
call    0 returned 1
        1:  211:	      token_ind--;
        1:  212:	      get_actual_token(token_str,token_ind);
call    0 returned 1
        1:  213:	      strcpy(token_ptr->token_string,token_str);
        1:  214:	      return(token_ptr);
        -:  215:	  }
        -:  216:
       14:  217:	  switch(next_st)
branch  0 taken 13
branch  1 taken 1
branch  2 taken 0
branch  3 taken 0
branch  4 taken 0
        -:  218:            {
       13:  219:                 default : break;
        -:  220:                 case 6  : /* These are all KEYWORD cases. */
        -:  221:                 case 9  :
        -:  222:                 case 11 :
        -:  223:                 case 13 :
        1:  224:                 case 16 : ch=get_char(tstream_ptr->ch_stream);
call    0 returned 1
        1:  225:                           if(check_delimiter(ch)==TRUE)
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0
        -:  226:                           {
        1:  227:                                 token_ptr->token_id=keyword(next_st);
call    0 returned 1
        1:  228:                                 unget_char(ch,tstream_ptr->ch_stream);
call    0 returned 1
        1:  229:                                 token_ptr->token_string[0]='\0';
        1:  230:                                 return(token_ptr);
        -:  231:                           }
    #####:  232:                           unget_char(ch,tstream_ptr->ch_stream);
call    0 never executed
    #####:  233:                           break;
        -:  234:                 case 19 : /* These are all special SPECIAL character */
        -:  235:                 case 20 : /* cases */
        -:  236:                 case 21 :
        -:  237:                 case 22 :
        -:  238:                 case 23 :
        -:  239:                 case 24 :
        -:  240:                 case 25 :
    #####:  241:                 case 32 : token_ptr->token_id=special(next_st);
call    0 never executed
    #####:  242:                           token_ptr->token_string[0]='\0';
    #####:  243:                           return(token_ptr);
        -:  244:                 case 27 : /* These are constant cases */
    #####:  245:                 case 29 : token_ptr->token_id=constant(next_st,token_str,token_ind);
call    0 never executed
    #####:  246:                           get_actual_token(token_str,token_ind);
call    0 never executed
    #####:  247:                           strcpy(token_ptr->token_string,token_str);
    #####:  248:                           return(token_ptr);
        -:  249:                 case 30 :  /* This is COMMENT case */
    #####:  250:                           skip(tstream_ptr->ch_stream);
call    0 never executed
    #####:  251:                           token_ind=next_st=0;
    #####:  252:                           break;
        -:  253:            }
       13:  254:            cu_state=next_st;
       13:  255:            ch=get_char(tstream_ptr->ch_stream);
call    0 returned 13
        -:  256:      }
    #####:  257:}
        -:  258:
        -:  259:/* ******************************************************************
        -:  260:   Function name : numeric_case
        -:  261:   Input         : tstream_ptr,token_ptr,ch,token_str,token_ind
        -:  262:   Output        : token_ptr;
        -:  263:   Exceptions    : none
        -:  264:   Description   : It checks for the delimiter, if it is then it
        -:  265:                   forms numeric token else forms error token.
        -:  266: * ****************************************************************** */
        -:  267:
function numeric_case called 2 returned 100% blocks executed 38%
        2:  268:static token numeric_case(tstream_ptr,token_ptr,ch,token_str,token_ind)
        -:  269:token_stream tstream_ptr;
        -:  270:token token_ptr;
        -:  271:char ch,token_str[];
        -:  272:int token_ind;
        -:  273:{
        2:  274:        if(check_delimiter(ch)!=TRUE)
call    0 returned 2
branch  1 taken 0 (fallthrough)
branch  2 taken 2
        -:  275:        {   /* Error case */
    #####:  276:            token_ptr->token_id=ERROR;
    #####:  277:            while(check_delimiter(ch)==FALSE)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  278:	    {
    #####:  279:		if(token_ind >= 80) break; /* Added protection - hf */
branch  0 never executed
branch  1 never executed
    #####:  280:		token_str[token_ind++]=ch=get_char(tstream_ptr->ch_stream);
call    0 never executed
        -:  281:	    }
    #####:  282:            unget_char(ch,tstream_ptr->ch_stream);
call    0 never executed
    #####:  283:            token_ind--;
    #####:  284:            get_actual_token(token_str,token_ind);
call    0 never executed
    #####:  285:            strcpy(token_ptr->token_string,token_str);
    #####:  286:            return(token_ptr);
        -:  287:        }
        2:  288:        token_ptr->token_id=NUMERIC; /* Numeric case */
        2:  289:        unget_char(ch,tstream_ptr->ch_stream);
call    0 returned 2
        2:  290:        token_ind--;
        2:  291:        get_actual_token(token_str,token_ind);
call    0 returned 2
        2:  292:        strcpy(token_ptr->token_string,token_str);
        2:  293:        return(token_ptr);
        -:  294:}
        -:  295:
        -:  296:/* *****************************************************************
        -:  297:   Function name : error_or_eof_case
        -:  298:   Input         : tstream_ptr,token_ptr,cu_state,token_str,token_ind,ch
        -:  299:   Output        : token_ptr
        -:  300:   Exceptions    : none
        -:  301:   Description   : This function checks whether it is EOF or not.
        -:  302:                   If it is it returns EOF token else returns ERROR
        -:  303:                   token.
        -:  304: * *****************************************************************/
        -:  305:
function error_or_eof_case called 1 returned 100% blocks executed 44%
        1:  306:static token error_or_eof_case(tstream_ptr,token_ptr,cu_state,token_str,token_ind,ch)
        -:  307:token_stream tstream_ptr;
        -:  308:token token_ptr;
        -:  309:int cu_state,token_ind;
        -:  310:char token_str[],ch;
        -:  311:{
        1:  312:      if(is_end_of_character_stream(tstream_ptr->ch_stream))
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0
        -:  313:      {
        1:  314:            token_ptr->token_id = EOTSTREAM;
        1:  315:            token_ptr->token_string[0]='\0';
        1:  316:            return(token_ptr);
        -:  317:      }
    #####:  318:      if(cu_state !=0)
branch  0 never executed
branch  1 never executed
        -:  319:      {
    #####:  320:            unget_char(ch,tstream_ptr->ch_stream);
call    0 never executed
    #####:  321:            token_ind--;
        -:  322:      }
    #####:  323:      token_ptr->token_id=ERROR;
    #####:  324:      get_actual_token(token_str,token_ind);
call    0 never executed
    #####:  325:      strcpy(token_ptr->token_string,token_str);
    #####:  326:      return(token_ptr);
        -:  327:}
        -:  328:
        -:  329:/* *********************************************************************
        -:  330:   Function name : check_delimiter
        -:  331:   Input         : character
        -:  332:   Output        : boolean
        -:  333:   Exceptions    : none.
        -:  334:   Description   : This function checks for the delimiter. If ch is not
        -:  335:                   alphabet and non numeric then it returns TRUE else
        -:  336:                   it returns FALSE.
        -:  337: * ******************************************************************* */
        -:  338:
function check_delimiter called 3 returned 100% blocks executed 86%
        3:  339:static int check_delimiter(ch)
        -:  340:char ch;
        -:  341:{
        3:  342:      if(!isalpha(ch) && !isdigit(ch)) /* Check for digit and alpha */
call    0 returned 3
branch  1 taken 3 (fallthrough)
branch  2 taken 0
call    3 returned 3
branch  4 taken 3 (fallthrough)
branch  5 taken 0
        3:  343:          return(TRUE);
    #####:  344:      return(FALSE);
        -:  345:}
        -:  346:
        -:  347:/* ********************************************************************
        -:  348:   Function name : keyword
        -:  349:   Input         : state of the DFA
        -:  350:   Output        : Keyword.
        -:  351:   Exceptions    : If the state doesn't represent a keyword it exits.
        -:  352:   Description   : According to the final state specified by state the
        -:  353:                   respective token_id is returned.
        -:  354: * ***************************************************************** */
        -:  355:
function keyword called 1 returned 100% blocks executed 33%
        1:  356:static int keyword(state)
        -:  357:int state;
        -:  358:{
        1:  359:      switch(state)
branch  0 taken 0
branch  1 taken 0
branch  2 taken 1
branch  3 taken 0
branch  4 taken 0
branch  5 taken 0
        -:  360:      {   /* Return the respective macro for the Keyword. */
    #####:  361:          case 6 : return(LAMBDA);
    #####:  362:          case 9 : return(AND);
        1:  363:          case 11: return(OR);
    #####:  364:          case 13: return(IF);
    #####:  365:          case 16: return(XOR);
    #####:  366:          default: fprintf(stdout, "error\n");break;
call    0 never executed
        -:  367:      }
    #####:  368:      exit(0);
call    0 never executed
        -:  369:}
        -:  370:
        -:  371:/* ********************************************************************
        -:  372:   Function name : special
        -:  373:   Input         : The state of the DFA.
        -:  374:   Output        : special symbol.
        -:  375:   Exceptions    : if the state doesn't belong to a special character
        -:  376:                   it exits.
        -:  377:   Description   : This function returns the token_id according to the
        -:  378:                   final state given by state.
        -:  379: * ****************************************************************** */
        -:  380:
function special called 0 returned 0% blocks executed 0%
    #####:  381:static int special(state)
        -:  382:int state;
        -:  383:{
    #####:  384:     switch(state)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
        -:  385:     {   /* return the respective macro for the special character. */
    #####:  386:         case 19: return(LPAREN);
    #####:  387:         case 20: return(RPAREN);
    #####:  388:         case 21: return(LSQUARE);
    #####:  389:         case 22: return(RSQUARE);
    #####:  390:         case 23: return(QUOTE);
    #####:  391:         case 24: return(BQUOTE);
    #####:  392:         case 25: return(COMMA);
    #####:  393:	 case 32: return(EQUALGREATER);
    #####:  394:         default: fprintf(stdout, "error\n");break;
call    0 never executed
        -:  395:     }
    #####:  396:     exit(0);
call    0 never executed
        -:  397:}
        -:  398:
        -:  399:/* **********************************************************************
        -:  400:   Function name : skip
        -:  401:   Input         : character_stream
        -:  402:   Output        : void.
        -:  403:   Exceptions    : none.
        -:  404:   Description   : This function skips the comment part of the program.
        -:  405:                   It takes charcter_stream as input and reads character
        -:  406:                   until it finds new line character or
        -:  407:                   end_of_character_stream.
        -:  408: * ******************************************************************* */
        -:  409:
function skip called 0 returned 0% blocks executed 0%
    #####:  410:static skip(stream_ptr)
        -:  411:character_stream stream_ptr;
        -:  412:{
        -:  413:        char c;
        -:  414:
    #####:  415:        while((c=get_char(stream_ptr))!='\n' &&
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  416:               !is_end_of_character_stream(stream_ptr))
call    0 never executed
        -:  417:             ; /* Skip the characters until EOF or EOL found. */
    #####:  418:	if(c==EOF) unget_char(c, stream_ptr); /* Put back to leave gracefully - hf */
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####:  419:        return;
        -:  420:}
        -:  421:
        -:  422:/* *********************************************************************
        -:  423:   Function name : constant
        -:  424:   Input         : state of DFA, Token string, Token id.
        -:  425:   Output        : constant token.
        -:  426:   Exceptions    : none.
        -:  427:   Description   : This function returns the token_id for the constatnts
        -:  428:                   speccified by  the final state.
        -:  429: * ****************************************************************** */
        -:  430:
function constant called 0 returned 0% blocks executed 0%
    #####:  431:static int constant(state,token_str,token_ind)
        -:  432:int state,token_ind;
        -:  433:char token_str[];
        -:  434:{
    #####:  435:     switch(state)
branch  0 never executed
branch  1 never executed
branch  2 never executed
        -:  436:     {   /* Return the respective CONSTANT macro. */
    #####:  437:         case 27 : return(STRING_CONSTANT);
    #####:  438:         case 29 : token_str[token_ind-2]=' '; return(CHARACTER_CONSTANT);
    #####:  439:         default : break;
        -:  440:     }
    #####:  441:}
        -:  442:
        -:  443:
        -:  444:/* *******************************************************************
        -:  445:   Function name : next_state
        -:  446:   Input         : current state, character
        -:  447:   Output        : next state of the DFA
        -:  448:   Exceptions    : none.
        -:  449:   Description   : This function returns the next state in the transition
        -:  450:                   diagram. The next state is determined by the current
        -:  451:                   state state and the inpu character ch.
        -:  452: * ****************************************************************** */
        -:  453:
function next_state called 29 returned 100% blocks executed 100%
       29:  454:static int next_state(state,ch)
        -:  455:int state;
        -:  456:char ch;
        -:  457:{
       29:  458:    if(state < 0)
branch  0 taken 4 (fallthrough)
branch  1 taken 25
        4:  459:      return(state);
       25:  460:    if(base[state]+ch >= 0)
branch  0 taken 21 (fallthrough)
branch  1 taken 4
        -:  461:    {
       21:  462:        if(check[base[state]+ch] == state) /* Check for the right state */
branch  0 taken 14 (fallthrough)
branch  1 taken 7
       14:  463:             return(next[base[state]+ch]);
        -:  464:        else
        7:  465:              return(next_state(default1[state],ch));
call    0 returned 7
        -:  466:    }
        -:  467:    else
        4:  468:        return(next_state(default1[state],ch));
call    0 returned 4
        -:  469:}
        -:  470:
        -:  471:/* *********************************************************************
        -:  472:   Function name : is_eof_token
        -:  473:   Input         : token
        -:  474:   Output        : Boolean
        -:  475:   Exceptions    : none.
        -:  476:   Description   : This function checks whether the token t is eof_token
        -:  477:                   or not. If the integer value stored in the t is
        -:  478:                   EOTSTREAM then it is eof_token.
        -:  479: * ***************************************************************** */
        -:  480:
function is_eof_token called 5 returned 100% blocks executed 100%
        5:  481:BOOLEAN is_eof_token(t)
        -:  482:token t;
        -:  483:{
        5:  484:    if(t->token_id==EOTSTREAM)
branch  0 taken 1 (fallthrough)
branch  1 taken 4
        1:  485:        return(TRUE);
        4:  486:    return(FALSE);
        -:  487:}
        -:  488:
        -:  489:/* ********************************************************************
        -:  490:   Function name : print_token
        -:  491:   Input         : token
        -:  492:   Output        : Boolean
        -:  493:   Exceptions    : none.
        -:  494:   Description   : This function  prints the token. The token_id gives
        -:  495:                   the type of token not the token itself. So, in the
        -:  496:                   case of identifier,numeric,  string,character it is
        -:  497:                   required to print the actual token  from token_str.
        -:  498:                   So, precaution must be taken when printing the token.
        -:  499:                   This function is able to print the current token only
        -:  500:                   and it is the limitation of the program.
        -:  501: * ******************************************************************** */
        -:  502:
function print_token called 5 returned 100% blocks executed 27%
        5:  503:BOOLEAN print_token(token_ptr)
        -:  504:token token_ptr;
        -:  505:{
        5:  506:     switch(token_ptr->token_id)
branch  0 taken 0
branch  1 taken 1
branch  2 taken 0
branch  3 taken 0
branch  4 taken 1
branch  5 taken 0
branch  6 taken 0
branch  7 taken 1
branch  8 taken 2
branch  9 taken 0
branch 10 taken 0
branch 11 taken 0
branch 12 taken 0
branch 13 taken 0
branch 14 taken 0
branch 15 taken 0
branch 16 taken 0
branch 17 taken 0
branch 18 taken 0
branch 19 taken 0
        -:  507:     {    /* Print the respective tokens. */
    #####:  508:          case ERROR : fprintf(stdout, "error,\t\"");fprintf(stdout, "%s",token_ptr->token_string);
call    0 never executed
call    1 never executed
    #####:  509:                       fprintf(stdout, "\".\n");return(TRUE);
call    0 never executed
        1:  510:          case EOTSTREAM : fprintf(stdout, "eof.\n");return(TRUE);
call    0 returned 1
    #####:  511:          case 6 : fprintf(stdout, "keyword,\t\"lambda\".\n");return(TRUE);
call    0 never executed
    #####:  512:          case 9 : fprintf(stdout, "keyword,\t\"and\".\n");return(TRUE);
call    0 never executed
        1:  513:          case 11: fprintf(stdout, "keyword,\t\"or\".\n");return(TRUE);
call    0 returned 1
    #####:  514:          case 13: fprintf(stdout, "keyword,\t\"if\".\n");return(TRUE);
call    0 never executed
    #####:  515:          case 16: fprintf(stdout, "keyword,\t\"xor\".\n");return(TRUE);
call    0 never executed
        1:  516:          case 17: fprintf(stdout, "identifier,\t\"");fprintf(stdout, "%s",token_ptr->token_string);
call    0 returned 1
call    1 returned 1
        1:  517:                   fprintf(stdout, "\".\n");return(TRUE);
call    0 returned 1
        2:  518:          case 18: fprintf(stdout, "numeric,\t");fprintf(stdout, "%s",token_ptr->token_string);
call    0 returned 2
call    1 returned 2
        2:  519:                   fprintf(stdout, ".\n");return(TRUE);
call    0 returned 2
    #####:  520:          case 19: fprintf(stdout, "lparen.\n");return(TRUE);
call    0 never executed
    #####:  521:          case 20: fprintf(stdout, "rparen.\n");return(TRUE);
call    0 never executed
    #####:  522:          case 21: fprintf(stdout, "lsquare.\n");return(TRUE);
call    0 never executed
    #####:  523:          case 22: fprintf(stdout, "rsquare.\n");return(TRUE);
call    0 never executed
    #####:  524:          case 23: fprintf(stdout, "quote.\n");return(TRUE);
call    0 never executed
    #####:  525:          case 24: fprintf(stdout, "bquote.\n");return(TRUE);
call    0 never executed
    #####:  526:          case 25: fprintf(stdout, "comma.\n");return(TRUE);
call    0 never executed
    #####:  527:          case 27: fprintf(stdout, "string,\t");fprintf(stdout, "%s",token_ptr->token_string);
call    0 never executed
call    1 never executed
    #####:  528:                   fprintf(stdout, ".\n");return(TRUE);
call    0 never executed
    #####:  529:          case 29: fprintf(stdout, "character,\t\"");fprintf(stdout, "%s",token_ptr->token_string);
call    0 never executed
call    1 never executed
    #####:  530:                   fprintf(stdout, "\".\n");return(TRUE);
call    0 never executed
    #####:  531:          case 32: fprintf(stdout, "keyword,\t\"=>\".\n");return(TRUE);
call    0 never executed
    #####:  532:          default: break;
        -:  533:      }
    #####:  534:      return(FALSE);
        -:  535:}
        -:  536:
        -:  537:/* **********************************************************************
        -:  538:   Function name : get_actual_token
        -:  539:   Input         : token string and token id.
        -:  540:   Output        : void.
        -:  541:   Exceptions    : none.
        -:  542:   Description   : This function prints the actual token in the case of
        -:  543:                   identifier,numeric,string and character. It removes
        -:  544:                   the leading and trailing  spaces and prints the token.
        -:  545: * ****************************************************************** */
        -:  546:
function get_actual_token called 3 returned 100% blocks executed 94%
        3:  547:static get_actual_token(token_str,token_ind)
        -:  548:int token_ind;
        -:  549:char token_str[];
        -:  550:{
        -:  551:          int ind,start;
        -:  552:
        3:  553:          for(ind=token_ind;ind>0 && isspace(token_str[ind-1]);--ind);
branch  0 taken 3 (fallthrough)
branch  1 taken 0
call    2 returned 3
branch  3 taken 0
branch  4 taken 3 (fallthrough)
        -:  554:                        /* Delete the trailing white spaces & protect - hf */
        3:  555:           token_str[ind]='\0';token_ind=ind;
        5:  556:          for(ind=0;ind<token_ind;++ind)
branch  0 taken 5
branch  1 taken 0 (fallthrough)
        5:  557:                if(!isspace(token_str[ind]))
call    0 returned 5
branch  1 taken 3 (fallthrough)
branch  2 taken 2
        3:  558:                      break;
       12:  559:          for(start=0;ind<=token_ind;++start,++ind) /* Delete the leading
branch  0 taken 9
branch  1 taken 3 (fallthrough)
        -:  560:                                                       white spaces. */
        9:  561:                token_str[start]=token_str[ind];
        3:  562:          return;
        -:  563:}
